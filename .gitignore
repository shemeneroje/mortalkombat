import random
import os
import json
import time
import matplotlib.pyplot as plt
from pygame import mixer

# GAME MODES
GAME_MODES = ['Regular Simulation', '\'What If\' Simulation',
              'Single Player', 'Multi Player', 'View records']

# CHARACTER LIST
CHARACTER_LIST = ['Kitana', 'Frost', 'Shao Kahn', 'Scorpion',
                  'Spawn', 'Kano', 'Noob Saibot', 'Skarlet', 'Geras']

# ATTACKS MOVES: DAMAGE GOES FROM 5, 7, 9, 14 IN ORDER OF LIST INDEX 0, 1, 2
ATTACK_MOVES = {
    'Kitana': ['Fan Out', 'Low Slice', 'Full Slice', 'Back Throw'],
    'Frost': ['Headbutt', 'Blade Lunge', 'Ice Spike', 'Frosted Uppercut'],
    'Shao Kahn': ['Dragon Toe', 'Hammer Slammer', 'Deadly Swipe', 'Rising Wrath'],
    'Scorpion': ['Dark Soul', 'Flip Kick', 'Spear Slice', 'Rising Spear'],
    'Spawn': ['Shroud Strike', 'War Devil', 'Reflections', 'Rising Cape'],
    'Kano': ['Blade Evade', 'Outback Bash', 'Kangaroo Kick', 'Black Dragon Bash'],
    'Noob Saibot': ['Shadow Sclice', 'Sickle Swipe', 'Wraith Kick', 'Rising Sickle'],
    'Skarlet': ['Whip Snap', 'Scythe Slam', 'Side Slice', 'Kutter'],
    'Geras': ['Strong Step', 'Chrono Kick', 'Titan Toe', 'Rising Gauntlet']
}

# DAMAGE
ATTACK_MOVES_DAMAGE = [5, 7, 9, 14]

# FINAL KILL MOVES
FINAL_KILL_MOVES = {
    'Kitana': ['Gore Nado', 'Royal Execution'],
    'Frost': ['Ice Sculpture', 'The Cyber Initiative'],
    'Shao Kahn': ['YOU SUCK', 'Head Kabob'],
    'Scorpion': ['Get Over Here', 'Ashes'],
    'Spawn': ['Rest in Pieces', 'Unchained'],
    'Kano': ['NOT HERE TO F#CK SPIDERS', 'Look what I found'],
    'Noob Saibot': ['Decapper', 'Together Again'],
    'Skarlet': ['Bloody Fun', 'Gutted'],
    'Geras': ['Stasis Assault', 'Pulled Apart']
}

ENHANCEMENTS = ['Extra Health: increase health to 150',
                'Extra Strength: increases attack power by 5 points (excludes final kill)']

# GET USER INPUT


def get_option(options, prompt):
    for i in range(len(options)):
        print(f'{i + 1}. {options[i]}')
# IF INPUT IS NOT IN RANGE
    user_input = input(prompt)
    while (not user_input.isdigit() or int(user_input) < 1 or int(user_input) > len(options)):
        user_input = input(
            f'Please enter an integer between {1} and {len(options)}: ')
    print()

    return (options[int(user_input) - 1], int(user_input) - 1)

# CREATE JSON DATA FILES AND SAVES IT


def load_data(filename, default):
    data = default
    if os.path.exists(filename):
        filedata = open(filename)
        data = json.load(filedata)
        filedata.close()
    return data


def save_data(filename, data):
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    filedata = open(filename, 'w+')
    json.dump(data, filedata, indent=4)
    filedata.close()


def init_records(iterable):
    return {i: 0 for i in iterable}


# KEEPS UPDATING THE FILE EACH TIME GAMES RUNS
# INIT GAME RECORDS
most_wins = load_data('mortal_kombat_records/most_wins.json',
                      init_records(CHARACTER_LIST))
most_wins_simulation = load_data('mortal_kombat_records/most_wins_simulation.json',
                                 init_records(CHARACTER_LIST))
number_of_simulations = load_data('mortal_kombat_records/number_of_simulations.json',
                                  init_records(CHARACTER_LIST))
most_wins_no_enhancements_simulation = load_data('mortal_kombat_records/most_wins_no_enhancements_simulation.json',
                                 init_records(CHARACTER_LIST))
number_of_no_enhancements_simulations = load_data('mortal_kombat_records/number_of_no_enhancements_simulations.json',
                                  init_records(CHARACTER_LIST))
most_used_moves = load_data('mortal_kombat_records/most_used_moves.json',
                            {k: init_records(v) for k, v in ATTACK_MOVES.items()})
most_used_final_moves = load_data('mortal_kombat_records/most_used_final_moves.json', {
                                  k: init_records(v) for k, v in FINAL_KILL_MOVES.items()})
best_enhancements = load_data('mortal_kombat_records/best_enhancements.json',
                              init_records(['Extra Health', 'Extra Strength']))


# NEW CLASS
# KEEPS TRACK OF ATTACK MOVES, CHARACTER, HEALTH AND FINAL KILL MOVE AND RETURN MOVES
class Player:
    def __init__(self, player_num, use_enhancement=True):
        self.character = ''
        self.player_num = player_num
        self.attacks = ''
        self.use_enhancement = use_enhancement
        self.enhancement = ''
        self.health = 100
        self.attack_buff = 0
        self.final_kill_move = ''
        self.set_up()

    def set_up(self):
        # method to set up the player
        pass

    def move(self):
        # method to move the player
        pass

    def attack(self):
        # method to return the attack
        pass

    def final_kill(self):
        most_used_final_moves[self.character][self.final_kill_move] += 1

    def health_str(self):
        return f'{self.character} has {self.health} health points. '

    def __repr__(self):
        return f'Player {self.player_num} selected {self.character} with final kill {self.final_kill_move} and {self.enhancement} as their enhancement. ' if self.enhancement else f'Player {self.player_num} selected {self.character} with final kill {self.final_kill_move} and no enhancement. '


# NEW CLASS
# PLAYER SUBCLASS THAT HANDLES USER INPUT
class HumanPlayer(Player):
    def set_up(self):
        self.character = get_option(
            CHARACTER_LIST, f'Player {self.player_num} select a character: ')[0]
        self.attacks = ATTACK_MOVES[self.character]
        self.final_kill_move = get_option(
            FINAL_KILL_MOVES[self.character], 'Type corresponding number for final kill choice: ')[0]
        self.enhancement = get_option(ENHANCEMENTS, 'Select a character enhancement: ')[
            0].split(':')[0] if self.use_enhancement else None
        if self.enhancement == 'Extra Health':
            self.health += 50
        if self.enhancement == 'Extra Strength':
            self.attack_buff += 5

    def move(self):
        return get_option(['Block', 'Attack'], f'{self.character} select a move: ')[0]

    def attack(self):
        chosen_attack = get_option(
            self.attacks, f'{self.character} please choose your attack: ')
        most_used_moves[self.character][chosen_attack[0]] += 1
        return (chosen_attack[0], ATTACK_MOVES_DAMAGE[chosen_attack[1]] + self.attack_buff)

    def final_kill(self):
        super().final_kill()
        input(f'Press `Enter` to use {self.final_kill_move}. ')


# NEW CLASS
# COMPUTER SUBCLASS THAT RANDOMLY MAKES MOVES
class ComputerPlayer(Player):
    def set_up(self):
        self.character = random.choice(CHARACTER_LIST)
        self.attacks = ATTACK_MOVES[self.character]
        self.final_kill_move = random.choice(FINAL_KILL_MOVES[self.character])
        self.enhancement = random.choice(ENHANCEMENTS).split(
            ':')[0] if self.use_enhancement else None
        if self.enhancement == 'Extra Health':
            self.health += 50
        if self.enhancement == 'Extra Strength':
            self.attack_buff += 5
# MAKE GAME FEEL MORE INTERACTIVE
        time.sleep(0.3)

    def move(self):
        time.sleep(0.3)
        return random.choice(['Block', 'Attack'])

    def attack(self):
        index = random.randint(0, len(self.attacks) - 1)
        most_used_moves[self.character][self.attacks[index]] += 1
        time.sleep(0.3)
        return (self.attacks[index], ATTACK_MOVES_DAMAGE[index] + self.attack_buff)

    def final_kill(self):
        super().final_kill()
        time.sleep(0.3)


# NEW CLASS
# GAME LOOP AND HANDLES GAMES LOGIC
class Game:
    def __init__(self):
        self.game_restart = True

    def run(self):
        mixer.init()
        mixer.music.load("mortal.mp3")
        mixer.music.play()
        
        while self.game_restart:
            self.play_game()
            print()
            end_game = get_option(
                ['Yes', 'No'], 'Do you want to play again? ')[1]
            if end_game:
                self.game_restart = False
                
        self.quit_game()
        exit()
                
    def quit_game(self):
        mixer.music.stop()

    def setup_game(self):
        # set up players based on game mode
        self.players = []
# regular simulation
        if self.mode == 0:
            self.players = [ComputerPlayer(1), ComputerPlayer(2)]
# what if: simulation            
        if self.mode == 1:
            self.players = [ComputerPlayer(
                1, use_enhancement=False), ComputerPlayer(2, use_enhancement=True)]
# single player            
        if self.mode == 2:
            self.players = [HumanPlayer(1), ComputerPlayer(2)]
# muliplayer            
        if self.mode == 3:
            self.players = [HumanPlayer(1), HumanPlayer(2)]

        for player in self.players:
            print(player)
            print()
# chooses who goes first
        self.first_player = random.randint(0, 1)
        self.game_over = False
# multiplayer attack and block
    def game_round(self, player1, player2):
        player1_move = player1.move()
        player1_attack = player1.attack() if player1_move == 'Attack' else None
        player2_move = player2.move()
        player2_attack = player2.attack() if player2_move == 'Attack' else None

        if player1_move == 'Attack' and player2_move == 'Attack':
            print(
                f'{player1.character} uses {player1_attack[0]} on {player2.character}. ')
            print(
                f'{player2.character} uses {player2_attack[0]} on {player1.character}. ')
            player1.health -= player2_attack[1]
            player2.health -= player1_attack[1]
        if player1_move == 'Block':
            print(f'{player1.character} has blocked {player2.character}. ')
        if player2_move == 'Block':
            print(f'{player2.character} has blocked {player1.character}. ')
        print()

    def end_game(self, player1, player2):
        winner, loser = (player1, player2) if (
            player1.health >= player2.health) else (player2, player1)
        print(f'{loser.character}\'s health is low, FINISH THEM! ')
        winner.final_kill()
        print(
            f'{winner.character} uses {winner.final_kill_move} on {loser.character}, {winner.character} wins. Flawless Victory!')
        most_wins[winner.character] += 1
        if self.mode != 1:
            best_enhancements[winner.enhancement] += 1
        if self.mode == 0:
            most_wins_simulation[winner.character] += 1
            number_of_simulations[player1.character] += 1
            number_of_simulations[player2.character] += 1
        if self.mode == 1:
            most_wins_no_enhancements_simulation[winner.character] += 1
            number_of_no_enhancements_simulations[player1.character] += 1
            number_of_no_enhancements_simulations[player2.character] += 1
        self.game_over = True

    def play_game(self):
        self.age = input("How old are you?: ")
        self.mode = get_option(GAME_MODES, 'Please select a game mode: ')[1]
        print('Hello players and welcome to Mortal Kombat. We will start off by selecting characters, final kill moves, and enhancements before we start the game.')
        print()

        if self.mode == 4:
            self.display_records()
        else:
            self.setup_game()

            print(
                f'Now we will begin our fight between {self.players[0].character} and {self.players[1].character}. ')
            player1 = self.players[self.first_player]
            player2 = self.players[(self.first_player + 1) % 2]
            print(f'{player1.character} will go first. ')
            print()

            while (not self.game_over):
                print(player1.health_str())
                print(player2.health_str())
                print()

                if (player1.health <= 30) or (player2.health <= 30):
                    self.end_game(player1, player2)
                else:
                    self.game_round(player1, player2)

# SAVES THE DATA TO A JSON FILE AND STOREGE ON COMPUTER.
# KEEPS UPDATING THE FILE EACH TIME GAMES RUNS
        self.save_data()

    def save_data(self):
        save_data('mortal_kombat_records/most_wins.json', most_wins)
        save_data('mortal_kombat_records/most_wins_simulation.json', most_wins_simulation)
        save_data('mortal_kombat_records/number_of_simulations.json', number_of_simulations)
        save_data('mortal_kombat_records/most_wins_no_enhancements_simulation.json', most_wins_no_enhancements_simulation)
        save_data('mortal_kombat_records/number_of_no_enhancements_simulations.json', number_of_no_enhancements_simulations)
        save_data('mortal_kombat_records/most_used_moves.json', most_used_moves)
        save_data('mortal_kombat_records/most_used_final_moves.json',
                  most_used_final_moves)
        save_data('mortal_kombat_records/best_enhancements.json',
                  best_enhancements)

# DEFINES A STATIC METHOD
# GAME RECORDS
    @staticmethod
    def display_records():
        record_type = get_option(
            ['General Records', 'Player Records' ,'Hypothesis Testing'], 'Please select a record type: ')[0]

        if record_type == "General Records":
            char_most_win = max(most_wins.items(), key=lambda x: x[1])
            print(
                f'The character with the most wins is {char_most_win[0]} with {char_most_win[1]} wins. \n')

            print('The most popular moves for each character are: ')
            for character, moves in most_used_moves.items():
                char_move = max(moves.items(), key=lambda x: x[1])
                print(f'\t{character}: {char_move[0]} ({char_move[1]})\n')

            char_most_used_final_moves = {
                k: max(v.items(), key=lambda x: x[1]) for k, v in most_used_final_moves.items()}
            most_used_final_move = max(
                char_most_used_final_moves.items(), key=lambda x: x[1][1])
            print(
                f'The most used final kill move is {most_used_final_move[0]}\'s {most_used_final_move[1][0]}. \n')

            print(
                f'The best enhancement is {max(best_enhancements, key=best_enhancements.get)}. \n')

# GRAPHING GENERAL DATA
            dictionary = json.load(
                open('mortal_kombat_records/most_wins.json', 'r'))
# BAR GRAPH
            plt.bar(dictionary.keys(), dictionary.values(), color='slateblue')
            plt.xticks(rotation=45)

            plt.xlabel('Characters')
            plt.ylabel('Most Wins')
            plt.show()
# PIE CHART
            dictionary = json.load(
                open('mortal_kombat_records/best_enhancements.json', 'r'))
            _ = plt.figure()
            mycolors = ["#7286D3", "#8EA7E9"]
            plt.pie(dictionary.values(),
                    labels=dictionary.keys(), colors=mycolors)
            plt.legend()
            plt.show()
# GRAPHING PLAYER'S DATA
# SELECTS WHAT PLAYER'S DATA YOU WANT TO SEE

        elif record_type == 'Player Records':
            player = get_option(
                CHARACTER_LIST, 'Please select a character: ')[0]

            dict2 = json.load(
                open('mortal_kombat_records/most_used_moves.json', 'r'))[player]
            mycolors1 = ["#0A2647", "#144272", "#205295", "#2C74B3"]
            plt.pie(dict2.values(), labels=dict2.keys(), colors=mycolors1)
            plt.legend()
            plt.show()

            dict3 = json.load(
                open('mortal_kombat_records/most_used_final_moves.json', 'r'))[player]

            plt.bar(dict3.keys(), dict3.values(), color='skyblue')
            plt.xlabel('Characters')
            plt.ylabel('Most Final Move')
            plt.show()

        elif record_type == 'Hypothesis Testing':
            win_percentages = {
                character: most_wins_simulation[character] / number_of_simulations[character] if number_of_simulations[character] != 0 else 0 for character in CHARACTER_LIST}
            highest_win_percentage = max(
                win_percentages.items(), key=lambda x: x[1])
            best_character = highest_win_percentage[0]
            print(
                f'The player most likely to win is {best_character} with {most_wins_simulation[best_character]} win in {number_of_simulations[best_character]} simulations. \n')

            win_no_enhancements_percentages = {
                character: most_wins_no_enhancements_simulation[character] / number_of_no_enhancements_simulations[character] if number_of_no_enhancements_simulations[character] != 0 else 0 for character in CHARACTER_LIST}
            highest_win_percentage = max(
                win_no_enhancements_percentages.items(), key=lambda x: x[1])
            best_character = highest_win_percentage[0]
            print(
                f'The player most likely to win with no enhancements is {best_character} with {most_wins_no_enhancements_simulation[best_character]} win in {number_of_no_enhancements_simulations[best_character]} simulations. \n')

        self.quit_game()


# STARTING PLAYER INPUT AND GAME
print('#      #    #####    #####  ########   ####    #         ')
print('# #  # #   #     #   #    #    #      #    #   #         ')
print('#  ##  #  #       #  #####     #     ########  #         ')
print('#      #  #       #  # #       #     #      #  #         ')
print('#      #   #     #   #  #      #     #      #  #         ')
print('#      #    #####    #   #     #     #      #  #######   ')
print('                                                         ')
print('#     #    #####    #      #  ####     ####   #########  ')
print('#   ##    #     #   # #  # #  #   #   #    #      #      ')
print('# ##     #       #  #  ##  #  #####  ########     #      ')
print('# ##     #       #  #      #  #   #  #      #     #      ')
print('#   ##    #     #   #      #  #   #  #      #     #      ')
print('#     #    #####    #      #  ####   #      #     #      ')
print('                                                         ')

if __name__ == '__main__':
    game = Game()
    game.run()
